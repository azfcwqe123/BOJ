![image](https://github.com/user-attachments/assets/d1e7ac52-2a80-47c4-a551-a2cb4b5d79a5)

![image](https://github.com/user-attachments/assets/7f2eb768-c357-4fb7-9b3f-493572b64ad9)

문제 출처: https://www.acmicpc.net/problem/2468

---

### Hint

1. 이와 같이 장마철에 내리는 비의 양에 따라서 물에 잠기지 않는 안전한 영역의 개수는 다르게 된다.

- 내리는 비의 양에 따른 경우들을 탐색해야함.
  
```cpp
// 주어지는 지역의 높이 중, 가장 높은 높이를 갱신한다.
maxh = max(maxh, board[i][j]); 
```

&nbsp;

2. 높이는 1 이상 100 이하의 정수이다.

```cpp
for(int h=1; h<=maxh; h++) { ... }
```


---

```cpp
#include <bits/stdc++.h>
using namespace std;

const int max_n = 100;

// ans = 1인 이유 : 물에 잠기지 않는 최소 영역은 1이다.
int n, cnt, ans = 1, maxh = 0, board[max_n][max_n], visited[max_n][max_n];

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, -1, 0, 1};

bool rangeCheck(int nx, int ny) {
    return nx >= 0 && ny >= 0 && nx < n && ny < n;
}

void dfs(int x, int y, int h) {
    visited[x][y] = 1; // 방문 체크
    
    for(int i=0; i<4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        
        // 범위 X or 이미 방문 or 땅이 물 높이보다 같거나 낮다면(잠긴 상황)
        if(!rangeCheck(nx, ny) || visited[nx][ny] || board[nx][ny] <= h) continue;
        
        dfs(nx, ny, h);
    }
}

int main() {
    cin >> n;
    
    for(int i=0; i<n; i++) {
        for(int j=0; j<n; j++) {
            cin >> board[i][j];    
            // 주어지는 지역의 높이 중, 가장 높은 높이를 갱신한다.
            maxh = max(maxh, board[i][j]); 
        }
    }
    
    // 높이는 1이상
    for(int h=1; h<=maxh; h++) {
        cnt = 0;
        
        // 높이 1 ~ maxh까지 모든 경우의수를 탐색해야하니, 방문여부를 매번 초기화 해준다.
        fill(&visited[0][0], &visited[0][0] + 100 * 100, 0);
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                
                // 잠기지 않은 영역이라면 
                if(board[i][j] > h && !visited[i][j]) {
                    dfs(i, j, h); // 안전 영역 탐색 시작
                    cnt++; // 안전 영역 개수
                }    
            }
        }
        
        ans = max(ans, cnt); // 안전한 영역의 최대 개수 갱신
    }
    
    cout << ans;
}
```